// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v3.12.4
// source: gpx/track_log.proto

package gpx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrackLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Creator       *string                `protobuf:"bytes,1,opt,name=creator" json:"creator,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NanoTime      *int64                 `protobuf:"varint,3,opt,name=nano_time,json=nanoTime" json:"nano_time,omitempty"`
	Link          *TrackLink             `protobuf:"bytes,4,opt,name=link" json:"link,omitempty"`
	WayPoints     []*WayPoint            `protobuf:"bytes,5,rep,name=way_points,json=wayPoints" json:"way_points,omitempty"`
	Tracks        []*Track               `protobuf:"bytes,6,rep,name=tracks" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackLog) Reset() {
	*x = TrackLog{}
	mi := &file_gpx_track_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackLog) ProtoMessage() {}

func (x *TrackLog) ProtoReflect() protoreflect.Message {
	mi := &file_gpx_track_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackLog.ProtoReflect.Descriptor instead.
func (*TrackLog) Descriptor() ([]byte, []int) {
	return file_gpx_track_log_proto_rawDescGZIP(), []int{0}
}

func (x *TrackLog) GetCreator() string {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return ""
}

func (x *TrackLog) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TrackLog) GetNanoTime() int64 {
	if x != nil && x.NanoTime != nil {
		return *x.NanoTime
	}
	return 0
}

func (x *TrackLog) GetLink() *TrackLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *TrackLog) GetWayPoints() []*WayPoint {
	if x != nil {
		return x.WayPoints
	}
	return nil
}

func (x *TrackLog) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type TrackLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           *string                `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	Text          *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackLink) Reset() {
	*x = TrackLink{}
	mi := &file_gpx_track_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackLink) ProtoMessage() {}

func (x *TrackLink) ProtoReflect() protoreflect.Message {
	mi := &file_gpx_track_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackLink.ProtoReflect.Descriptor instead.
func (*TrackLink) Descriptor() ([]byte, []int) {
	return file_gpx_track_log_proto_rawDescGZIP(), []int{1}
}

func (x *TrackLink) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *TrackLink) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type WayPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      *float64               `protobuf:"fixed64,1,req,name=latitude" json:"latitude,omitempty"`
	Longitude     *float64               `protobuf:"fixed64,2,req,name=longitude" json:"longitude,omitempty"`
	NanoTime      *int64                 `protobuf:"varint,3,opt,name=nano_time,json=nanoTime" json:"nano_time,omitempty"`
	Elevation     *float64               `protobuf:"fixed64,4,opt,name=elevation" json:"elevation,omitempty"`
	Name          *string                `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Comment       *string                `protobuf:"bytes,7,opt,name=comment" json:"comment,omitempty"`
	Symbol        *string                `protobuf:"bytes,8,opt,name=symbol" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WayPoint) Reset() {
	*x = WayPoint{}
	mi := &file_gpx_track_log_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WayPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WayPoint) ProtoMessage() {}

func (x *WayPoint) ProtoReflect() protoreflect.Message {
	mi := &file_gpx_track_log_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WayPoint.ProtoReflect.Descriptor instead.
func (*WayPoint) Descriptor() ([]byte, []int) {
	return file_gpx_track_log_proto_rawDescGZIP(), []int{2}
}

func (x *WayPoint) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *WayPoint) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *WayPoint) GetNanoTime() int64 {
	if x != nil && x.NanoTime != nil {
		return *x.NanoTime
	}
	return 0
}

func (x *WayPoint) GetElevation() float64 {
	if x != nil && x.Elevation != nil {
		return *x.Elevation
	}
	return 0
}

func (x *WayPoint) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *WayPoint) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *WayPoint) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *WayPoint) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

type Track struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type          *string                `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Comment       *string                `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	Segments      []*Segment             `protobuf:"bytes,4,rep,name=segments" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Track) Reset() {
	*x = Track{}
	mi := &file_gpx_track_log_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_gpx_track_log_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_gpx_track_log_proto_rawDescGZIP(), []int{3}
}

func (x *Track) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Track) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Track) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *Track) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type Segment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Points        []*Point               `protobuf:"bytes,1,rep,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_gpx_track_log_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_gpx_track_log_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_gpx_track_log_proto_rawDescGZIP(), []int{4}
}

func (x *Segment) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      *float64               `protobuf:"fixed64,1,req,name=latitude" json:"latitude,omitempty"`
	Longitude     *float64               `protobuf:"fixed64,2,req,name=longitude" json:"longitude,omitempty"`
	NanoTime      *int64                 `protobuf:"varint,3,opt,name=nano_time,json=nanoTime" json:"nano_time,omitempty"`
	Elevation     *float64               `protobuf:"fixed64,4,opt,name=elevation" json:"elevation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_gpx_track_log_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_gpx_track_log_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_gpx_track_log_proto_rawDescGZIP(), []int{5}
}

func (x *Point) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *Point) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *Point) GetNanoTime() int64 {
	if x != nil && x.NanoTime != nil {
		return *x.NanoTime
	}
	return 0
}

func (x *Point) GetElevation() float64 {
	if x != nil && x.Elevation != nil {
		return *x.Elevation
	}
	return 0
}

type TrackStats struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Distance          *float64               `protobuf:"fixed64,1,req,name=distance" json:"distance,omitempty"`
	NanoTime          *int64                 `protobuf:"varint,7,opt,name=nano_time,json=nanoTime" json:"nano_time,omitempty"`
	NanoDuration      *int64                 `protobuf:"varint,2,req,name=nano_duration,json=nanoDuration" json:"nano_duration,omitempty"`
	ElevationGain     *float64               `protobuf:"fixed64,3,req,name=elevation_gain,json=elevationGain" json:"elevation_gain,omitempty"`
	ElevationLoss     *float64               `protobuf:"fixed64,4,req,name=elevation_loss,json=elevationLoss" json:"elevation_loss,omitempty"`
	ElevationMin      *float64               `protobuf:"fixed64,5,opt,name=elevation_min,json=elevationMin" json:"elevation_min,omitempty"`
	ElevationMax      *float64               `protobuf:"fixed64,6,opt,name=elevation_max,json=elevationMax" json:"elevation_max,omitempty"`
	ElevationDistance *float64               `protobuf:"fixed64,11,opt,name=elevation_distance,json=elevationDistance" json:"elevation_distance,omitempty"`
	NumTracks         *int64                 `protobuf:"varint,8,opt,name=num_tracks,json=numTracks" json:"num_tracks,omitempty"`
	NumSegments       *int64                 `protobuf:"varint,9,opt,name=num_segments,json=numSegments" json:"num_segments,omitempty"`
	NumPoints         *int64                 `protobuf:"varint,10,opt,name=num_points,json=numPoints" json:"num_points,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TrackStats) Reset() {
	*x = TrackStats{}
	mi := &file_gpx_track_log_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStats) ProtoMessage() {}

func (x *TrackStats) ProtoReflect() protoreflect.Message {
	mi := &file_gpx_track_log_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStats.ProtoReflect.Descriptor instead.
func (*TrackStats) Descriptor() ([]byte, []int) {
	return file_gpx_track_log_proto_rawDescGZIP(), []int{6}
}

func (x *TrackStats) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *TrackStats) GetNanoTime() int64 {
	if x != nil && x.NanoTime != nil {
		return *x.NanoTime
	}
	return 0
}

func (x *TrackStats) GetNanoDuration() int64 {
	if x != nil && x.NanoDuration != nil {
		return *x.NanoDuration
	}
	return 0
}

func (x *TrackStats) GetElevationGain() float64 {
	if x != nil && x.ElevationGain != nil {
		return *x.ElevationGain
	}
	return 0
}

func (x *TrackStats) GetElevationLoss() float64 {
	if x != nil && x.ElevationLoss != nil {
		return *x.ElevationLoss
	}
	return 0
}

func (x *TrackStats) GetElevationMin() float64 {
	if x != nil && x.ElevationMin != nil {
		return *x.ElevationMin
	}
	return 0
}

func (x *TrackStats) GetElevationMax() float64 {
	if x != nil && x.ElevationMax != nil {
		return *x.ElevationMax
	}
	return 0
}

func (x *TrackStats) GetElevationDistance() float64 {
	if x != nil && x.ElevationDistance != nil {
		return *x.ElevationDistance
	}
	return 0
}

func (x *TrackStats) GetNumTracks() int64 {
	if x != nil && x.NumTracks != nil {
		return *x.NumTracks
	}
	return 0
}

func (x *TrackStats) GetNumSegments() int64 {
	if x != nil && x.NumSegments != nil {
		return *x.NumSegments
	}
	return 0
}

func (x *TrackStats) GetNumPoints() int64 {
	if x != nil && x.NumPoints != nil {
		return *x.NumPoints
	}
	return 0
}

var File_gpx_track_log_proto protoreflect.FileDescriptor

const file_gpx_track_log_proto_rawDesc = "" +
	"\n" +
	"\x13gpx/track_log.proto\x12\x03gpx\"\xcb\x01\n" +
	"\bTrackLog\x12\x18\n" +
	"\acreator\x18\x01 \x01(\tR\acreator\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tnano_time\x18\x03 \x01(\x03R\bnanoTime\x12\"\n" +
	"\x04link\x18\x04 \x01(\v2\x0e.gpx.TrackLinkR\x04link\x12,\n" +
	"\n" +
	"way_points\x18\x05 \x03(\v2\r.gpx.WayPointR\twayPoints\x12\"\n" +
	"\x06tracks\x18\x06 \x03(\v2\n" +
	".gpx.TrackR\x06tracks\"1\n" +
	"\tTrackLink\x12\x10\n" +
	"\x03url\x18\x01 \x02(\tR\x03url\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"\xe7\x01\n" +
	"\bWayPoint\x12\x1a\n" +
	"\blatitude\x18\x01 \x02(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x02 \x02(\x01R\tlongitude\x12\x1b\n" +
	"\tnano_time\x18\x03 \x01(\x03R\bnanoTime\x12\x1c\n" +
	"\televation\x18\x04 \x01(\x01R\televation\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x18\n" +
	"\acomment\x18\a \x01(\tR\acomment\x12\x16\n" +
	"\x06symbol\x18\b \x01(\tR\x06symbol\"s\n" +
	"\x05Track\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12(\n" +
	"\bsegments\x18\x04 \x03(\v2\f.gpx.SegmentR\bsegments\"-\n" +
	"\aSegment\x12\"\n" +
	"\x06points\x18\x01 \x03(\v2\n" +
	".gpx.PointR\x06points\"|\n" +
	"\x05Point\x12\x1a\n" +
	"\blatitude\x18\x01 \x02(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x02 \x02(\x01R\tlongitude\x12\x1b\n" +
	"\tnano_time\x18\x03 \x01(\x03R\bnanoTime\x12\x1c\n" +
	"\televation\x18\x04 \x01(\x01R\televation\"\x92\x03\n" +
	"\n" +
	"TrackStats\x12\x1a\n" +
	"\bdistance\x18\x01 \x02(\x01R\bdistance\x12\x1b\n" +
	"\tnano_time\x18\a \x01(\x03R\bnanoTime\x12#\n" +
	"\rnano_duration\x18\x02 \x02(\x03R\fnanoDuration\x12%\n" +
	"\x0eelevation_gain\x18\x03 \x02(\x01R\relevationGain\x12%\n" +
	"\x0eelevation_loss\x18\x04 \x02(\x01R\relevationLoss\x12#\n" +
	"\relevation_min\x18\x05 \x01(\x01R\felevationMin\x12#\n" +
	"\relevation_max\x18\x06 \x01(\x01R\felevationMax\x12-\n" +
	"\x12elevation_distance\x18\v \x01(\x01R\x11elevationDistance\x12\x1d\n" +
	"\n" +
	"num_tracks\x18\b \x01(\x03R\tnumTracks\x12!\n" +
	"\fnum_segments\x18\t \x01(\x03R\vnumSegments\x12\x1d\n" +
	"\n" +
	"num_points\x18\n" +
	" \x01(\x03R\tnumPointsB\n" +
	"Z\bgpx/;gpx"

var (
	file_gpx_track_log_proto_rawDescOnce sync.Once
	file_gpx_track_log_proto_rawDescData []byte
)

func file_gpx_track_log_proto_rawDescGZIP() []byte {
	file_gpx_track_log_proto_rawDescOnce.Do(func() {
		file_gpx_track_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gpx_track_log_proto_rawDesc), len(file_gpx_track_log_proto_rawDesc)))
	})
	return file_gpx_track_log_proto_rawDescData
}

var file_gpx_track_log_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_gpx_track_log_proto_goTypes = []any{
	(*TrackLog)(nil),   // 0: gpx.TrackLog
	(*TrackLink)(nil),  // 1: gpx.TrackLink
	(*WayPoint)(nil),   // 2: gpx.WayPoint
	(*Track)(nil),      // 3: gpx.Track
	(*Segment)(nil),    // 4: gpx.Segment
	(*Point)(nil),      // 5: gpx.Point
	(*TrackStats)(nil), // 6: gpx.TrackStats
}
var file_gpx_track_log_proto_depIdxs = []int32{
	1, // 0: gpx.TrackLog.link:type_name -> gpx.TrackLink
	2, // 1: gpx.TrackLog.way_points:type_name -> gpx.WayPoint
	3, // 2: gpx.TrackLog.tracks:type_name -> gpx.Track
	4, // 3: gpx.Track.segments:type_name -> gpx.Segment
	5, // 4: gpx.Segment.points:type_name -> gpx.Point
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_gpx_track_log_proto_init() }
func file_gpx_track_log_proto_init() {
	if File_gpx_track_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gpx_track_log_proto_rawDesc), len(file_gpx_track_log_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gpx_track_log_proto_goTypes,
		DependencyIndexes: file_gpx_track_log_proto_depIdxs,
		MessageInfos:      file_gpx_track_log_proto_msgTypes,
	}.Build()
	File_gpx_track_log_proto = out.File
	file_gpx_track_log_proto_goTypes = nil
	file_gpx_track_log_proto_depIdxs = nil
}
